/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package uko.Bayes;

import javax.swing.ComboBoxModel;
import javax.swing.event.ListDataListener;
import javax.swing.table.DefaultTableModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//uko.Bayes//Bayes//EN",
autostore = false)
@TopComponent.Description(preferredID = "BayesTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "uko.Bayes.BayesTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_BayesAction",
preferredID = "BayesTopComponent")
public final class BayesTopComponent extends TopComponent
{
	public BayesTopComponent()
	{
		initComponents();
		setName(NbBundle.getMessage(BayesTopComponent.class, "CTL_BayesTopComponent"));
		setToolTipText(NbBundle.getMessage(BayesTopComponent.class, "HINT_BayesTopComponent"));
		putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
		putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Жін.", "Добре", "RNB", "Вечір", null},
                {"Група", "Добре", "Оперетта", "Ранок", new Boolean(true)},
                {"Чол.", "Середнє", "Рок", "День", new Boolean(true)},
                {"Жін", "Добре", "Попса", "Вечір", null},
                {"Чол.", "Погане", "Оперетта", "Ніч", null},
                {"Жін.", "Середнє", "Попса", "День", null},
                {"Група", "Середнє", "Рок", "Ранок", new Boolean(true)},
                {"Чол.", "Погане", "RNB", "Ніч", null}
            },
            new String [] {
                "Стать співака", "Вміння Співати", "Жанр Пісні", "Час Дня", "Сподобалось"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
	private abstract class ComboBox
	{
		abstract public ComboBoxModel get();
	}
	/*private class ComboBoxSex extends ComboBox
	{
		@Override
		public ComboBoxModel get()
		{
			ComboBoxModel result = new myComboBoxModel();
			for(int i=0; i<table.getRowCount(); i++)
				//result.((DefaultTableModel)table.getModel()).getValueAt(i, 0);
		}
		
	}*/
	
	private class myComboBoxModel implements ComboBoxModel
	{
		@Override
		public void setSelectedItem(Object o)
		{
			throw new UnsupportedOperationException("Not supported yet.");
		}
		@Override
		public Object getSelectedItem()
		{
			throw new UnsupportedOperationException("Not supported yet.");
		}
		@Override
		public int getSize()
		{
			throw new UnsupportedOperationException("Not supported yet.");
		}
		@Override
		public Object getElementAt(int i)
		{
			throw new UnsupportedOperationException("Not supported yet.");
		}
		@Override
		public void addListDataListener(ListDataListener ll)
		{
			throw new UnsupportedOperationException("Not supported yet.");
		}
		@Override
		public void removeListDataListener(ListDataListener ll)
		{
			throw new UnsupportedOperationException("Not supported yet.");
		}
		
	}
	
	@Override
	public void componentOpened()
	{
		// TODO add custom code on component opening
	}
	@Override
	public void componentClosed()
	{
		// TODO add custom code on component closing
	}
	void writeProperties(java.util.Properties p)
	{
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}
	void readProperties(java.util.Properties p)
	{
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}
}
